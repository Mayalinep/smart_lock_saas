const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testToggleStatus() {
  console.log('‚úèÔ∏è === Test Toggle Status de Propri√©t√© ===\n');

  let token;
  let propertyId;

  try {
    // 1. Connexion pour r√©cup√©rer un token
    console.log('1Ô∏è‚É£ Connexion pour r√©cup√©rer un token:');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'jane.doe@example.com',
      password: 'Mot2Passe!'
    });

    if (loginResponse.data.success) {
      console.log('‚úÖ Connexion r√©ussie');
      const cookies = loginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      token = tokenCookie ? tokenCookie.split(';')[0] : null;
      console.log(`üç™ Token re√ßu: ${token ? 'OUI' : 'NON'}`);
    }

    console.log('\n---\n');

    // 2. Cr√©ation d'une propri√©t√© pour tester le toggle
    console.log('2Ô∏è‚É£ Cr√©ation d\'une propri√©t√© pour le test:');
    const createResponse = await axios.post(`${BASE_URL}/properties`, {
      name: 'Propri√©t√© Test Toggle',
      address: '123 Rue Test Status, Ville Toggle',
      description: 'Propri√©t√© pour tester le changement de statut'
    }, {
      headers: {
        Cookie: token
      }
    });

    if (createResponse.data.success) {
      propertyId = createResponse.data.data.property.id;
      const initialStatus = createResponse.data.data.property.isActive;
      console.log(`‚úÖ Propri√©t√© cr√©√©e: ${propertyId}`);
      console.log(`üìÑ Statut initial: ${initialStatus ? 'ACTIVE' : 'INACTIVE'}`);
    }

    console.log('\n---\n');

    // 3. Test sans token (devrait √©chouer)
    console.log('3Ô∏è‚É£ Test toggle sans token (devrait √©chouer):');
    try {
      await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
        isActive: false
      });
      console.log('‚ùå Probl√®me: Le toggle devrait √©chouer sans token!');
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log(`‚úÖ Route prot√©g√©e - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 4. D√©sactivation de la propri√©t√©
    console.log('4Ô∏è‚É£ D√©sactivation de la propri√©t√©:');
    const deactivateResponse = await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
      isActive: false
    }, {
      headers: {
        Cookie: token
      }
    });

    if (deactivateResponse.data.success) {
      console.log('‚úÖ D√©sactivation r√©ussie!');
      console.log(`üìÑ Message: ${deactivateResponse.data.message}`);
      console.log(`üìä Nouveau statut: ${deactivateResponse.data.data.property.isActive ? 'ACTIVE' : 'INACTIVE'}`);
      console.log(`üìÖ Mis √† jour le: ${deactivateResponse.data.data.property.updatedAt}`);
    }

    console.log('\n---\n');

    // 5. R√©activation de la propri√©t√©
    console.log('5Ô∏è‚É£ R√©activation de la propri√©t√©:');
    const activateResponse = await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
      isActive: true
    }, {
      headers: {
        Cookie: token
      }
    });

    if (activateResponse.data.success) {
      console.log('‚úÖ Activation r√©ussie!');
      console.log(`üìÑ Message: ${activateResponse.data.message}`);
      console.log(`üìä Nouveau statut: ${activateResponse.data.data.property.isActive ? 'ACTIVE' : 'INACTIVE'}`);
      console.log(`üìÖ Mis √† jour le: ${activateResponse.data.data.property.updatedAt}`);
    }

    console.log('\n---\n');

    // 6. Test avec donn√©es invalides
    console.log('6Ô∏è‚É£ Test avec donn√©es invalides (devrait √©chouer):');
    try {
      await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
        isActive: "invalid" // String au lieu de boolean
      }, {
        headers: {
          Cookie: token
        }
      });
      console.log('‚ùå Probl√®me: Devrait rejeter les donn√©es non-bool√©ennes!');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log(`‚úÖ Validation r√©ussie - Erreur attendue: ${error.response.data.message}`);
        console.log(`üìä Status code: ${error.response.status}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 7. Test avec ID inexistant
    console.log('7Ô∏è‚É£ Test avec ID inexistant (devrait √©chouer):');
    try {
      await axios.patch(`${BASE_URL}/properties/id-inexistant-123/status`, {
        isActive: true
      }, {
        headers: {
          Cookie: token
        }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec un ID inexistant!');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(`‚úÖ ID inexistant rejet√© - Erreur attendue: ${error.response.data.message}`);
        console.log(`üìä Status code: ${error.response.status}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 8. V√©rification finale avec GET
    console.log('8Ô∏è‚É£ V√©rification finale du statut:');
    const finalCheckResponse = await axios.get(`${BASE_URL}/properties/${propertyId}`, {
      headers: {
        Cookie: token
      }
    });

    if (finalCheckResponse.data.success) {
      const finalProperty = finalCheckResponse.data.data.property;
      console.log('‚úÖ V√©rification finale r√©ussie!');
      console.log(`üìÑ Statut final: ${finalProperty.isActive ? 'ACTIVE' : 'INACTIVE'}`);
      console.log(`üìÖ Derni√®re mise √† jour: ${finalProperty.updatedAt}`);
      console.log(`üÜî ID confirm√©: ${finalProperty.id}`);
    }

    console.log('\n---\n');

    // 9. Test de multiple toggles rapides
    console.log('9Ô∏è‚É£ Test de toggles multiples rapides:');
    
    // Toggle 1: false
    await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
      isActive: false
    }, {
      headers: { Cookie: token }
    });
    console.log('üì¥ Toggle 1: D√âSACTIV√â');

    // Toggle 2: true
    await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
      isActive: true
    }, {
      headers: { Cookie: token }
    });
    console.log('üì¥ Toggle 2: ACTIV√â');

    // Toggle 3: false
    const finalToggle = await axios.patch(`${BASE_URL}/properties/${propertyId}/status`, {
      isActive: false
    }, {
      headers: { Cookie: token }
    });
    
    if (finalToggle.data.success) {
      console.log('üì¥ Toggle 3: D√âSACTIV√â');
      console.log(`‚úÖ Statut final apr√®s toggles multiples: ${finalToggle.data.data.property.isActive ? 'ACTIVE' : 'INACTIVE'}`);
    }

    console.log('\nüéØ Test de toggle status termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur dans le test:', error.response?.data || error.message);
  }
}

// Ex√©cuter le test
testToggleStatus(); 