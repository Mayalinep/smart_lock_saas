const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testDeleteAccess() {
  console.log('‚úèÔ∏è === Test Suppression S√©curis√©e d\'Acc√®s ===\n');

  let ownerToken;
  let targetUserToken;
  let otherOwnerToken;
  let propertyId;
  let otherPropertyId;
  let targetUserId;
  let accessId;
  let otherAccessId;

  try {
    // 1. Connexion du propri√©taire principal
    console.log('1Ô∏è‚É£ Connexion du propri√©taire principal:');
    const ownerLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'jane.doe@example.com',
      password: 'Mot2Passe!'
    });

    if (ownerLoginResponse.data.success) {
      console.log('‚úÖ Connexion propri√©taire principal r√©ussie');
      const cookies = ownerLoginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      ownerToken = tokenCookie ? tokenCookie.split(';')[0] : null;
    }

    console.log('\n---\n');

    // 2. Connexion utilisateur cible (qui re√ßoit l'acc√®s) 
    console.log('2Ô∏è‚É£ Connexion utilisateur cible:');
    const targetLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'target.user@example.com',
      password: 'TargetPass123!'
    });

    if (targetLoginResponse.data.success) {
      targetUserId = targetLoginResponse.data.data.user.id;
      const cookies = targetLoginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      targetUserToken = tokenCookie ? tokenCookie.split(';')[0] : null;
      console.log(`‚úÖ Utilisateur cible connect√©: ${targetUserId}`);
    }

    console.log('\n---\n');

    // 3. Cr√©ation d'un autre propri√©taire (pour test s√©curit√©)
    console.log('3Ô∏è‚É£ Cr√©ation d\'un autre propri√©taire:');
    
    const otherOwner = {
      email: 'other.owner@example.com',
      password: 'OtherPass123!',
      firstName: 'Other',
      lastName: 'Owner'
    };

    try {
      const registerResponse = await axios.post(`${BASE_URL}/auth/register`, otherOwner);
      console.log(`‚úÖ Autre propri√©taire cr√©√©: ${registerResponse.data.data.user.id}`);
    } catch (registerError) {
      if (registerError.response?.status === 409) {
        console.log('üìù Autre propri√©taire existe d√©j√†, connexion...');
      }
    }

    // Connexion autre propri√©taire
    const otherOwnerLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: otherOwner.email,
      password: otherOwner.password
    });

    if (otherOwnerLoginResponse.data.success) {
      const cookies = otherOwnerLoginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      otherOwnerToken = tokenCookie ? tokenCookie.split(';')[0] : null;
      console.log('‚úÖ Autre propri√©taire connect√©');
    }

    console.log('\n---\n');

    // 4. Cr√©ation des propri√©t√©s
    console.log('4Ô∏è‚É£ Cr√©ation des propri√©t√©s:');
    
    // Propri√©t√© du propri√©taire principal
    const property1Response = await axios.post(`${BASE_URL}/properties`, {
      name: 'Propri√©t√© Test Delete',
      address: '123 Rue Delete Test, Ville S√©curit√©',
      description: 'Propri√©t√© pour tester la suppression d\'acc√®s'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (property1Response.data.success) {
      propertyId = property1Response.data.data.property.id;
      console.log(`‚úÖ Propri√©t√© principale cr√©√©e: ${property1Response.data.data.property.name}`);
    }

    // Propri√©t√© de l'autre propri√©taire
    const property2Response = await axios.post(`${BASE_URL}/properties`, {
      name: 'Propri√©t√© Autre Owner',
      address: '456 Rue Autre Owner, Ville Test',
      description: 'Propri√©t√© d\'un autre propri√©taire'
    }, {
      headers: { Cookie: otherOwnerToken }
    });

    if (property2Response.data.success) {
      otherPropertyId = property2Response.data.data.property.id;
      console.log(`‚úÖ Propri√©t√© autre propri√©taire cr√©√©e: ${property2Response.data.data.property.name}`);
    }

    console.log('\n---\n');

    // 5. Cr√©ation d'acc√®s √† supprimer
    console.log('5Ô∏è‚É£ Cr√©ation d\'acc√®s √† supprimer:');
    
    // Acc√®s dans la propri√©t√© principale
    const access1Response = await axios.post(`${BASE_URL}/access`, {
      propertyId,
      userId: targetUserId,
      startDate: '2025-08-01T09:00:00.000Z',
      endDate: '2025-08-10T17:00:00.000Z',
      accessType: 'TEMPORARY',
      description: 'Acc√®s √† supprimer - test s√©curit√©'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (access1Response.data.success) {
      accessId = access1Response.data.data.access.id;
      console.log(`‚úÖ Acc√®s principal cr√©√© - Code: ${access1Response.data.data.access.code}`);
      console.log(`üÜî Access ID: ${accessId}`);
    }

    // Acc√®s dans la propri√©t√© de l'autre propri√©taire
    const access2Response = await axios.post(`${BASE_URL}/access`, {
      propertyId: otherPropertyId,  
      userId: targetUserId,
      startDate: '2025-08-01T09:00:00.000Z',
      endDate: '2025-08-10T17:00:00.000Z',
      accessType: 'TEMPORARY',
      description: 'Acc√®s de l\'autre propri√©taire'
    }, {
      headers: { Cookie: otherOwnerToken }
    });

    if (access2Response.data.success) {
      otherAccessId = access2Response.data.data.access.id;
      console.log(`‚úÖ Acc√®s autre propri√©taire cr√©√© - Code: ${access2Response.data.data.access.code}`);
      console.log(`üÜî Other Access ID: ${otherAccessId}`);
    }

    console.log('\n---\n');

    // 6. Test sans token (devrait √©chouer)
    console.log('6Ô∏è‚É£ Test suppression sans token (devrait √©chouer):');
    try {
      await axios.delete(`${BASE_URL}/access/${accessId}`);
      console.log('‚ùå Probl√®me: Devrait √©chouer sans token!');
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log(`‚úÖ Route prot√©g√©e - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 7. Test utilisateur cible tente de supprimer son propre acc√®s (S√âCURIT√â CRITIQUE)
    console.log('7Ô∏è‚É£ üõ°Ô∏è Test ANTI-SQUATTEUR - Utilisateur cible tente de supprimer son acc√®s:');
    try {
      await axios.delete(`${BASE_URL}/access/${accessId}`, {
        headers: { Cookie: targetUserToken }
      });
      console.log('‚ùå PROBL√àME S√âCURIT√â: L\'utilisateur cible ne devrait PAS pouvoir supprimer son acc√®s!');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(`‚úÖ S√âCURIT√â OK - Utilisateur cible rejet√©: ${error.response.data.message}`);
        console.log(`üõ°Ô∏è Protection anti-squatteur activ√©e!`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 8. Test propri√©taire tente de supprimer acc√®s d'une autre propri√©t√© (S√âCURIT√â)
    console.log('8Ô∏è‚É£ üõ°Ô∏è Test INTER-PROPRI√âTAIRES - Propri√©taire A tente de supprimer acc√®s de propri√©taire B:');
    try {
      await axios.delete(`${BASE_URL}/access/${otherAccessId}`, {
        headers: { Cookie: ownerToken } // Propri√©taire A tente de supprimer acc√®s de propri√©taire B
      });
      console.log('‚ùå PROBL√àME S√âCURIT√â: Propri√©taire A ne devrait PAS pouvoir supprimer acc√®s de propri√©taire B!');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(`‚úÖ S√âCURIT√â OK - Propri√©taire non autoris√© rejet√©: ${error.response.data.message}`);
        console.log(`üõ°Ô∏è Protection inter-propri√©taires activ√©e!`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 9. Test avec ID d'acc√®s inexistant
    console.log('9Ô∏è‚É£ Test avec ID d\'acc√®s inexistant:');
    try {
      await axios.delete(`${BASE_URL}/access/access-inexistant-123`, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec ID inexistant!');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(`‚úÖ ID inexistant rejet√© - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 10. V√©rification que l'acc√®s existe avant suppression
    console.log('üîü V√©rification que l\'acc√®s existe avant suppression:');
    const beforeDeleteResponse = await axios.get(`${BASE_URL}/access/property/${propertyId}`, {
      headers: { Cookie: ownerToken }
    });

    if (beforeDeleteResponse.data.success) {
      const accessExists = beforeDeleteResponse.data.data.accesses.find(a => a.id === accessId);
      console.log(`‚úÖ Acc√®s trouv√© avant suppression: ${accessExists ? 'OUI' : 'NON'}`);
      if (accessExists) {
        console.log(`üìÑ Code: ${accessExists.code}, Description: ${accessExists.description}`);
      }
    }

    console.log('\n---\n');

    // 11. SUPPRESSION R√âUSSIE - Propri√©taire l√©gitime supprime son acc√®s
    console.log('1Ô∏è‚É£1Ô∏è‚É£ ‚úÖ SUPPRESSION L√âGALE - Propri√©taire supprime son acc√®s:');
    const deleteResponse = await axios.delete(`${BASE_URL}/access/${accessId}`, {
      headers: { Cookie: ownerToken }
    });

    if (deleteResponse.data.success) {
      console.log('‚úÖ Suppression r√©ussie!');
      console.log(`üìÑ Message: ${deleteResponse.data.message}`);
      console.log(`üìä Status: ${deleteResponse.status}`);
      console.log(`üõ°Ô∏è S√©curit√© respect√©e: Seul le propri√©taire peut supprimer`);
    }

    console.log('\n---\n');

    // 12. V√©rification que l'acc√®s n'existe plus
    console.log('1Ô∏è‚É£2Ô∏è‚É£ V√©rification que l\'acc√®s a bien √©t√© supprim√©:');
    const afterDeleteResponse = await axios.get(`${BASE_URL}/access/property/${propertyId}`, {
      headers: { Cookie: ownerToken }
    });

    if (afterDeleteResponse.data.success) {
      const accessStillExists = afterDeleteResponse.data.data.accesses.find(a => a.id === accessId);
      console.log(`‚úÖ Acc√®s supprim√© d√©finitivement: ${accessStillExists ? 'NON - PROBL√àME!' : 'OUI'}`);
      console.log(`üìä Nombre d'acc√®s restants: ${afterDeleteResponse.data.data.accesses.length}`);
    }

    console.log('\n---\n');

    // 13. Test suppression d'un acc√®s d√©j√† supprim√©
    console.log('1Ô∏è‚É£3Ô∏è‚É£ Test suppression d\'un acc√®s d√©j√† supprim√©:');
    try {
      await axios.delete(`${BASE_URL}/access/${accessId}`, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer car acc√®s d√©j√† supprim√©!');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(`‚úÖ Acc√®s d√©j√† supprim√© d√©tect√© - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 14. V√©rification mes acc√®s utilisateur cible (l'acc√®s supprim√© ne doit plus appara√Ætre)
    console.log('1Ô∏è‚É£4Ô∏è‚É£ V√©rification: L\'acc√®s supprim√© n\'appara√Æt plus dans "mes acc√®s":');
    const myAccessesResponse = await axios.get(`${BASE_URL}/access/my-accesses`, {
      headers: { Cookie: targetUserToken }
    });

    if (myAccessesResponse.data.success) {
      const deletedAccessStillVisible = myAccessesResponse.data.data.accesses.find(a => a.id === accessId);
      console.log(`‚úÖ Acc√®s supprim√© invisible dans "mes acc√®s": ${deletedAccessStillVisible ? 'NON - PROBL√àME!' : 'OUI'}`);
      console.log(`üìä Mes acc√®s restants: ${myAccessesResponse.data.data.accesses.length}`);
    }

    console.log('\nüéØ Test de suppression s√©curis√©e termin√© !');
    console.log('\nüõ°Ô∏è R√âSUM√â S√âCURIT√â:');
    console.log('   ‚úÖ Seul le propri√©taire peut supprimer');
    console.log('   ‚úÖ Utilisateur cible ne peut PAS supprimer');  
    console.log('   ‚úÖ Propri√©taires ne peuvent pas se supprimer mutuellement');
    console.log('   ‚úÖ Protection anti-squatteur active');

  } catch (error) {
    console.error('‚ùå Erreur dans le test:', error.response?.data || error.message);
  }
}

// Ex√©cuter le test
testDeleteAccess(); 