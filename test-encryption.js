const encryptionService = require('./src/services/encryptionService');
const TwoFactorService = require('./src/services/twoFactorService');

async function testEncryption() {
    console.log('üîê Test du service de chiffrement...\n');

    try {
        // Test 1: Chiffrement simple
        console.log('üìß Test 1: Chiffrement simple');
        const originalText = 'Mon secret tr√®s sensible';
        const encrypted = encryptionService.encrypt(originalText);
        const decrypted = encryptionService.decrypt(encrypted);
        
        console.log('‚úÖ Chiffrement simple:', originalText === decrypted ? 'SUCC√àS' : '√âCHEC');
        console.log('   Original:', originalText);
        console.log('   Chiffr√©:', encrypted.substring(0, 50) + '...');
        console.log('   D√©chiffr√©:', decrypted);

        // Test 2: Chiffrement d'objet JSON
        console.log('\nüìß Test 2: Chiffrement d\'objet JSON');
        const originalObject = { codes: ['ABC123', 'DEF456', 'GHI789'] };
        const encryptedObject = encryptionService.encryptObject(originalObject);
        const decryptedObject = encryptionService.decryptObject(encryptedObject);
        
        console.log('‚úÖ Chiffrement JSON:', JSON.stringify(originalObject) === JSON.stringify(decryptedObject) ? 'SUCC√àS' : '√âCHEC');
        console.log('   Original:', originalObject);
        console.log('   Chiffr√©:', encryptedObject.substring(0, 50) + '...');
        console.log('   D√©chiffr√©:', decryptedObject);

        // Test 3: D√©tection de chiffrement
        console.log('\nüìß Test 3: D√©tection de chiffrement');
        const plainText = 'texte en clair';
        const encryptedText = encryptionService.encrypt('texte chiffr√©');
        
        console.log('‚úÖ D√©tection chiffrement:');
        console.log('   Texte en clair:', encryptionService.isEncrypted(plainText) ? 'D√âTECT√â' : 'NON D√âTECT√â');
        console.log('   Texte chiffr√©:', encryptionService.isEncrypted(encryptedText) ? 'D√âTECT√â' : 'NON D√âTECT√â');

        // Test 4: G√©n√©ration de cl√©
        console.log('\nüìß Test 4: G√©n√©ration de cl√©');
        const newKey = encryptionService.constructor.generateKey();
        console.log('‚úÖ Nouvelle cl√© g√©n√©r√©e:', newKey.length >= 32 ? 'VALIDE' : 'INVALIDE');
        console.log('   Longueur:', newKey.length, 'caract√®res');

        // Test 5: Validation de cl√©
        console.log('\nüìß Test 5: Validation de cl√©');
        const validKey = 'a'.repeat(32);
        const invalidKey = 'trop_court';
        
        console.log('‚úÖ Validation de cl√©:');
        console.log('   Cl√© valide:', encryptionService.constructor.validateKey(validKey) ? 'VALIDE' : 'INVALIDE');
        console.log('   Cl√© invalide:', encryptionService.constructor.validateKey(invalidKey) ? 'VALIDE' : 'INVALIDE');

        // Test 6: Int√©gration avec 2FA
        console.log('\nüìß Test 6: Int√©gration avec 2FA');
        const mockUser = { email: 'test@example.com' };
        const secretData = TwoFactorService.generateSecret(mockUser);
        const backupCodes = TwoFactorService.generateBackupCodes();
        
        // Simuler l'activation 2FA avec chiffrement
        const twoFactorData = await TwoFactorService.enableTwoFactor(mockUser, secretData.secret);
        
        console.log('‚úÖ Int√©gration 2FA:');
        console.log('   Secret chiffr√©:', encryptionService.isEncrypted(twoFactorData.encryptedSecret) ? 'CHIFFR√â' : 'NON CHIFFR√â');
        console.log('   Backup codes chiffr√©s:', encryptionService.isEncrypted(twoFactorData.encryptedBackupCodes) ? 'CHIFFR√âS' : 'NON CHIFFR√âS');

        // Test 7: V√©rification TOTP avec chiffrement
        console.log('\nüìß Test 7: V√©rification TOTP avec chiffrement');
        const token = '123456'; // Token de test
        const isValid = TwoFactorService.verifyToken(twoFactorData.encryptedSecret, token);
        console.log('‚úÖ V√©rification TOTP:', isValid ? 'VALIDE' : 'INVALIDE');

        console.log('\nüéâ Tous les tests de chiffrement passent !');
        console.log('\nüîí S√©curit√© renforc√©e :');
        console.log('   - Secrets TOTP chiffr√©s');
        console.log('   - Codes de sauvegarde chiffr√©s');
        console.log('   - IV al√©atoire pour chaque chiffrement');
        console.log('   - Gestion d\'erreurs robuste');

    } catch (error) {
        console.error('‚ùå Erreur lors du test de chiffrement:', error);
    }
}

// Ex√©cuter le test
testEncryption(); 