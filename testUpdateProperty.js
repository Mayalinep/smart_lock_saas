const axios = require('axios');

// URLs de test
const LOGIN_URL = 'http://localhost:3000/api/auth/login';
const PROPERTY_URL = 'http://localhost:3000/api/properties';

// Donn√©es de connexion
const loginData = {
  email: "jane.doe@example.com",
  password: "Mot2Passe!"
};

async function testUpdateProperty() {
  console.log('‚úèÔ∏è === Test de mise √† jour de propri√©t√© ===\n');

  let cookies;
  let propertyId;

  // √âtape 1: Se connecter pour avoir un token
  console.log('1Ô∏è‚É£ Connexion pour r√©cup√©rer un token:');
  try {
    const loginResponse = await axios.post(LOGIN_URL, loginData);
    console.log('‚úÖ Connexion r√©ussie');
    
    cookies = loginResponse.headers['set-cookie'];
    console.log('üç™ Token re√ßu:', cookies ? 'OUI' : 'NON');
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 2: Cr√©er une propri√©t√© √† modifier
  console.log('2Ô∏è‚É£ Cr√©ation d\'une propri√©t√© √† modifier:');
  const originalPropertyData = {
    name: "Propri√©t√© Original",
    address: "123 Rue Original, Paris",
    description: "Description originale"
  };

  try {
    const createResponse = await axios.post(PROPERTY_URL, originalPropertyData, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    propertyId = createResponse.data.data.property.id;
    console.log(`‚úÖ Propri√©t√© cr√©√©e: ${propertyId}`);
    console.log('üìÑ Donn√©es originales:', {
      name: createResponse.data.data.property.name,
      address: createResponse.data.data.property.address,
      description: createResponse.data.data.property.description
    });
  } catch (error) {
    console.log('‚ùå Erreur cr√©ation propri√©t√©:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 3: Test mise √† jour sans token (devrait √©chouer)
  console.log('3Ô∏è‚É£ Test mise √† jour sans token (devrait √©chouer):');
  const updateData = { name: "Nom Modifi√©" };
  try {
    const response = await axios.put(`${PROPERTY_URL}/${propertyId}`, updateData);
    console.log('‚ùå Probl√®me: Route non prot√©g√©e!');
  } catch (error) {
    console.log('‚úÖ Route prot√©g√©e - Erreur attendue:', error.response?.data.message);
  }

  console.log('\n---\n');

  // √âtape 4: Mise √† jour partielle (nom seulement)
  console.log('4Ô∏è‚É£ Mise √† jour partielle (nom seulement):');
  const partialUpdate = {
    name: "Appartement Modifi√©"
  };

  try {
    const response = await axios.put(`${PROPERTY_URL}/${propertyId}`, partialUpdate, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    console.log('‚úÖ Mise √† jour partielle r√©ussie!');
    console.log('üìÑ Propri√©t√© mise √† jour:', {
      name: response.data.data.property.name,
      address: response.data.data.property.address,
      description: response.data.data.property.description
    });
  } catch (error) {
    console.log('‚ùå Erreur mise √† jour partielle:', error.response?.data);
  }

  console.log('\n---\n');

  // √âtape 5: Mise √† jour compl√®te
  console.log('5Ô∏è‚É£ Mise √† jour compl√®te:');
  const fullUpdate = {
    name: "Appartement Totalement Modifi√©",
    address: "456 Avenue Nouvelle, Lyon",
    description: "Description enti√®rement mise √† jour"
  };

  try {
    const response = await axios.put(`${PROPERTY_URL}/${propertyId}`, fullUpdate, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    console.log('‚úÖ Mise √† jour compl√®te r√©ussie!');
    console.log('üìÑ Propri√©t√© finale:', {
      name: response.data.data.property.name,
      address: response.data.data.property.address,
      description: response.data.data.property.description
    });
  } catch (error) {
    console.log('‚ùå Erreur mise √† jour compl√®te:', error.response?.data);
  }

  console.log('\n---\n');

  // √âtape 6: Test avec ID inexistant
  console.log('6Ô∏è‚É£ Test avec ID inexistant (devrait √©chouer):');
  const fakeId = 'fake-property-id-123456789';
  try {
    const response = await axios.put(`${PROPERTY_URL}/${fakeId}`, { name: "Test" }, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    console.log('‚ùå Probl√®me: ID inexistant accept√©!');
  } catch (error) {
    console.log('‚úÖ ID inexistant rejet√© - Erreur attendue:', error.response?.data.message);
    console.log('üìä Status code:', error.response?.status);
  }

  console.log('\n---\n');

  // √âtape 7: V√©rification avec GET pour confirmer les changements
  console.log('7Ô∏è‚É£ V√©rification finale avec GET:');
  try {
    const response = await axios.get(`${PROPERTY_URL}/${propertyId}`, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    console.log('‚úÖ V√©rification r√©ussie!');
    console.log('üìÑ √âtat final de la propri√©t√©:', {
      name: response.data.data.property.name,
      address: response.data.data.property.address,
      description: response.data.data.property.description,
      updatedAt: response.data.data.property.updatedAt
    });
  } catch (error) {
    console.log('‚ùå Erreur v√©rification:', error.response?.data);
  }

  console.log('\n---\n');

  // √âtape 8: Test description vide (edge case)
  console.log('8Ô∏è‚É£ Test mise √† jour avec description vide:');
  const emptyDescUpdate = {
    description: ""
  };

  try {
    const response = await axios.put(`${PROPERTY_URL}/${propertyId}`, emptyDescUpdate, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    console.log('‚úÖ Description vide accept√©e!');
    console.log('üìÑ Description mise √† jour:', response.data.data.property.description === "" ? "VIDE" : response.data.data.property.description);
  } catch (error) {
    console.log('‚ùå Erreur description vide:', error.response?.data);
  }

  console.log('\nüéØ Test de mise √† jour termin√© !');
}

// Lancer le test
testUpdateProperty(); 