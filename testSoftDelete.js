const axios = require('axios');
const { PrismaClient } = require('@prisma/client');

const BASE_URL = 'http://localhost:3000/api';
const prisma = new PrismaClient();

async function testSoftDelete() {
  console.log('‚úèÔ∏è === Test Syst√®me de Soft Delete (R√©vocation) ===\n');

  let ownerToken;
  let targetUserToken;
  let propertyId;
  let targetUserId;
  let accessId;
  let ownerId;

  try {
    // 1. Connexion du propri√©taire
    console.log('1Ô∏è‚É£ Connexion du propri√©taire:');
    const ownerLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'jane.doe@example.com',
      password: 'Mot2Passe!'
    });

    if (ownerLoginResponse.data.success) {
      ownerId = ownerLoginResponse.data.data.user.id;
      console.log('‚úÖ Connexion propri√©taire r√©ussie');
      const cookies = ownerLoginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      ownerToken = tokenCookie ? tokenCookie.split(';')[0] : null;
    }

    console.log('\n---\n');

    // 2. Connexion utilisateur cible
    console.log('2Ô∏è‚É£ Connexion utilisateur cible:');
    const targetLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'target.user@example.com',
      password: 'TargetPass123!'
    });

    if (targetLoginResponse.data.success) {
      targetUserId = targetLoginResponse.data.data.user.id;
      const cookies = targetLoginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      targetUserToken = tokenCookie ? tokenCookie.split(';')[0] : null;
      console.log(`‚úÖ Utilisateur cible connect√©: ${targetUserId}`);
    }

    console.log('\n---\n');

    // 3. Cr√©ation d'une propri√©t√©
    console.log('3Ô∏è‚É£ Cr√©ation d\'une propri√©t√© pour le test:');
    const propertyResponse = await axios.post(`${BASE_URL}/properties`, {
      name: 'Propri√©t√© Test Soft Delete',
      address: '123 Rue Soft Delete, Ville Test',
      description: 'Propri√©t√© pour tester la r√©vocation d\'acc√®s'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (propertyResponse.data.success) {
      propertyId = propertyResponse.data.data.property.id;
      console.log(`‚úÖ Propri√©t√© cr√©√©e: ${propertyResponse.data.data.property.name}`);
    }

    console.log('\n---\n');

    // 4. Cr√©ation d'un acc√®s √† r√©voquer
    console.log('4Ô∏è‚É£ Cr√©ation d\'un acc√®s √† r√©voquer:');
    const accessResponse = await axios.post(`${BASE_URL}/access`, {
      propertyId,
      userId: targetUserId,
      startDate: '2025-08-01T09:00:00.000Z',
      endDate: '2025-08-20T17:00:00.000Z',
      accessType: 'TEMPORARY',
      description: 'Acc√®s temporaire √† r√©voquer'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (accessResponse.data.success) {
      accessId = accessResponse.data.data.access.id;
      console.log(`‚úÖ Acc√®s cr√©√© - Code: ${accessResponse.data.data.access.code}`);
      console.log(`üÜî Access ID: ${accessId}`);
    }

    console.log('\n---\n');

    // 5. V√©rification que l'acc√®s appara√Æt dans les listes avant r√©vocation
    console.log('5Ô∏è‚É£ V√©rification pr√©sence dans les listes AVANT r√©vocation:');
    
    // Liste propri√©t√©
    const beforePropertyResponse = await axios.get(`${BASE_URL}/access/property/${propertyId}`, {
      headers: { Cookie: ownerToken }
    });
    const beforePropertyCount = beforePropertyResponse.data.data.accesses.length;
    console.log(`‚úÖ Acc√®s dans propri√©t√© AVANT: ${beforePropertyCount}`);

    // Mes acc√®s utilisateur
    const beforeUserResponse = await axios.get(`${BASE_URL}/access/my-accesses`, {
      headers: { Cookie: targetUserToken }
    });
    const beforeUserCount = beforeUserResponse.data.data.accesses.length;
    console.log(`‚úÖ Mes acc√®s AVANT: ${beforeUserCount}`);

    console.log('\n---\n');

    // 6. V√©rification directe en base de donn√©es AVANT r√©vocation
    console.log('6Ô∏è‚É£ V√©rification en base AVANT r√©vocation:');
    const accessInDb = await prisma.access.findUnique({
      where: { id: accessId }
    });
    console.log(`‚úÖ Acc√®s en base - isActive: ${accessInDb.isActive}`);
    console.log(`‚úÖ Acc√®s en base - revokedAt: ${accessInDb.revokedAt || 'NULL'}`);
    console.log(`‚úÖ Acc√®s en base - revokedBy: ${accessInDb.revokedBy || 'NULL'}`);

    console.log('\n---\n');

    // 7. R√âVOCATION (soft delete) de l'acc√®s
    console.log('7Ô∏è‚É£ üóëÔ∏è R√âVOCATION de l\'acc√®s (soft delete):');
    const revokeResponse = await axios.delete(`${BASE_URL}/access/${accessId}`, {
      headers: { Cookie: ownerToken }
    });

    if (revokeResponse.data.success) {
      console.log('‚úÖ R√©vocation r√©ussie!');
      console.log(`üìÑ Message: ${revokeResponse.data.message}`);
      console.log(`üìä Status: ${revokeResponse.status}`);
      console.log(`‚è∞ R√©voqu√© le: ${new Date(revokeResponse.data.data.revokedAt).toLocaleString()}`);
      console.log(`üë§ R√©voqu√© par: ${revokeResponse.data.data.revokedBy}`);
      console.log(`üîë Code r√©voqu√©: ${revokeResponse.data.data.access.code}`);
      console.log(`üë§ Utilisateur impact√©: ${revokeResponse.data.data.access.user.firstName} ${revokeResponse.data.data.access.user.lastName}`);
    }

    console.log('\n---\n');

    // 8. V√©rification directe en base APR√àS r√©vocation (l'acc√®s doit toujours exister)
    console.log('8Ô∏è‚É£ üîç V√©rification en base APR√àS r√©vocation:');
    const revokedAccessInDb = await prisma.access.findUnique({
      where: { id: accessId }
    });
    
    if (revokedAccessInDb) {
      console.log('‚úÖ Acc√®s CONSERV√â en base (soft delete OK)');
      console.log(`üìä isActive: ${revokedAccessInDb.isActive} (devrait √™tre false)`);
      console.log(`‚è∞ revokedAt: ${revokedAccessInDb.revokedAt || 'NULL'} (devrait √™tre rempli)`);
      console.log(`üë§ revokedBy: ${revokedAccessInDb.revokedBy || 'NULL'} (devrait √™tre rempli)`);
      console.log(`üîë Code conserv√©: ${revokedAccessInDb.code}`);
    } else {
      console.log('‚ùå PROBL√àME: Acc√®s supprim√© de la base (hard delete non souhait√©)');
    }

    console.log('\n---\n');

    // 9. V√©rification que l'acc√®s n'appara√Æt PLUS dans les listes
    console.log('9Ô∏è‚É£ üö´ V√©rification disparition des listes APR√àS r√©vocation:');
    
    // Liste propri√©t√©
    const afterPropertyResponse = await axios.get(`${BASE_URL}/access/property/${propertyId}`, {
      headers: { Cookie: ownerToken }
    });
    const afterPropertyCount = afterPropertyResponse.data.data.accesses.length;
    console.log(`‚úÖ Acc√®s dans propri√©t√© APR√àS: ${afterPropertyCount} (${beforePropertyCount - afterPropertyCount} en moins)`);

    // Mes acc√®s utilisateur
    const afterUserResponse = await axios.get(`${BASE_URL}/access/my-accesses`, {
      headers: { Cookie: targetUserToken }
    });
    const afterUserCount = afterUserResponse.data.data.accesses.length;
    console.log(`‚úÖ Mes acc√®s APR√àS: ${afterUserCount} (${beforeUserCount - afterUserCount} en moins)`);

    // V√©rifier que l'acc√®s r√©voqu√© n'appara√Æt plus
    const revokedAccessInProperty = afterPropertyResponse.data.data.accesses.find(a => a.id === accessId);
    const revokedAccessInUser = afterUserResponse.data.data.accesses.find(a => a.id === accessId);
    
    console.log(`üö´ Acc√®s r√©voqu√© invisible dans propri√©t√©: ${revokedAccessInProperty ? 'NON - PROBL√àME!' : 'OUI'}`);
    console.log(`üö´ Acc√®s r√©voqu√© invisible dans mes acc√®s: ${revokedAccessInUser ? 'NON - PROBL√àME!' : 'OUI'}`);

    console.log('\n---\n');

    // 10. Test de double r√©vocation (doit √©chouer)
    console.log('üîü üö´ Test double r√©vocation (devrait √©chouer):');
    try {
      await axios.delete(`${BASE_URL}/access/${accessId}`, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå PROBL√àME: Double r√©vocation autoris√©e!');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log(`‚úÖ Double r√©vocation correctement rejet√©e: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 11. Requ√™te directe pour voir TOUS les acc√®s (y compris r√©voqu√©s)
    console.log('1Ô∏è‚É£1Ô∏è‚É£ üìä Audit - Tous les acc√®s (y compris r√©voqu√©s):');
    const allAccessesInDb = await prisma.access.findMany({
      where: {
        propertyId: propertyId
      },
      include: {
        user: {
          select: { firstName: true, lastName: true, email: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìä Total acc√®s en base (tous √©tats): ${allAccessesInDb.length}`);
    allAccessesInDb.forEach((access, index) => {
      const status = access.revokedAt ? 'R√âVOQU√â' : (access.isActive ? 'ACTIF' : 'INACTIF');
      const revokedInfo = access.revokedAt ? 
        ` (r√©voqu√© par ${access.revokedBy} le ${new Date(access.revokedAt).toLocaleDateString()})` : '';
      
      console.log(`   ${index + 1}. ${access.code} - ${status}${revokedInfo}`);
      console.log(`      üë§ Utilisateur: ${access.user.firstName} ${access.user.lastName}`);
      console.log(`      üìù Description: ${access.description}`);
    });

    console.log('\n---\n');

    // 12. Cr√©ation et r√©vocation d'un second acc√®s pour tester l'historique
    console.log('1Ô∏è‚É£2Ô∏è‚É£ üìà Test historique - Cr√©ation d\'un second acc√®s:');
    const access2Response = await axios.post(`${BASE_URL}/access`, {
      propertyId,
      userId: targetUserId,
      startDate: '2025-08-05T10:00:00.000Z',
      endDate: '2025-08-15T18:00:00.000Z',
      accessType: 'PERMANENT',
      description: 'Second acc√®s pour test historique'
    }, {
      headers: { Cookie: ownerToken }
    });

    let access2Id;
    if (access2Response.data.success) {
      access2Id = access2Response.data.data.access.id;
      console.log(`‚úÖ Second acc√®s cr√©√© - Code: ${access2Response.data.data.access.code}`);
    }

    // R√©vocation du second acc√®s
    await axios.delete(`${BASE_URL}/access/${access2Id}`, {
      headers: { Cookie: ownerToken }
    });
    console.log('‚úÖ Second acc√®s aussi r√©voqu√©');

    // V√©rification historique complet
    const finalAudit = await prisma.access.findMany({
      where: { propertyId: propertyId },
      select: {
        id: true,
        code: true,
        isActive: true,
        revokedAt: true,
        revokedBy: true,
        accessType: true,
        description: true
      }
    });

    console.log(`üìä Historique final: ${finalAudit.length} acc√®s en base`);
    const activeCount = finalAudit.filter(a => a.isActive && !a.revokedAt).length;
    const revokedCount = finalAudit.filter(a => a.revokedAt).length;
    console.log(`   üìà Actifs: ${activeCount}`);
    console.log(`   üóëÔ∏è R√©voqu√©s: ${revokedCount}`);

    console.log('\nüéØ Test du syst√®me de soft delete termin√© !');
    console.log('\nüìã R√âSUM√â SOFT DELETE:');
    console.log('   ‚úÖ Acc√®s r√©voqu√©s conserv√©s en base (historique)');
    console.log('   ‚úÖ Acc√®s r√©voqu√©s invisibles dans les listes');
    console.log('   ‚úÖ Tra√ßabilit√© compl√®te (qui, quand)');
    console.log('   ‚úÖ Protection double r√©vocation');
    console.log('   ‚úÖ Audit et historique possibles');

  } catch (error) {
    console.error('‚ùå Erreur dans le test:', error.response?.data || error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testSoftDelete(); 