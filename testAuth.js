const axios = require('axios');

// URLs de test
const LOGIN_URL = 'http://localhost:3000/api/auth/login';
const PROTECTED_URL = 'http://localhost:3000/api/auth/me';

// Donn√©es de login
const loginData = {
  email: "jane.doe@example.com",
  password: "Mot2Passe!"
};

async function testAuthentication() {
  console.log('üß™ === Test du middleware d\'authentification ===\n');

  // Test 1: Acc√®s sans token (devrait √©chouer)
  console.log('1Ô∏è‚É£ Test sans token (devrait √©chouer):');
  try {
    const response = await axios.get(PROTECTED_URL);
    console.log('‚ùå Erreur: La route devrait √™tre prot√©g√©e!');
  } catch (error) {
    console.log('‚úÖ Route prot√©g√©e - Erreur attendue:', error.response?.data);
  }

  console.log('\n---\n');

  // Test 2: Login pour r√©cup√©rer un token
  console.log('2Ô∏è‚É£ Connexion pour r√©cup√©rer un token:');
  let cookies;
  try {
    const loginResponse = await axios.post(LOGIN_URL, loginData);
    console.log('‚úÖ Connexion r√©ussie:', loginResponse.data.message);
    
    // Extraire les cookies de la r√©ponse
    cookies = loginResponse.headers['set-cookie'];
    console.log('üç™ Cookie re√ßu:', cookies ? 'OUI' : 'NON');
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.response?.data);
    return; // Arr√™ter si la connexion √©choue
  }

  console.log('\n---\n');

  // Test 3: Acc√®s avec token valide (devrait r√©ussir)
  console.log('3Ô∏è‚É£ Test avec token valide (devrait r√©ussir):');
  try {
    const response = await axios.get(PROTECTED_URL, {
      headers: {
        // Transmettre le cookie avec la requ√™te
        'Cookie': cookies ? cookies.join('; ') : ''
      }
    });
    console.log('‚úÖ Acc√®s autoris√©:', response.data);
  } catch (error) {
    console.log('‚ùå Erreur:', error.response?.data);
  }

  console.log('\n---\n');

  // Test 4: Acc√®s avec token invalide (devrait √©chouer)
  console.log('4Ô∏è‚É£ Test avec token invalide (devrait √©chouer):');
  try {
    const response = await axios.get(PROTECTED_URL, {
      headers: {
        'Cookie': 'token=fake_invalid_token'
      }
    });
    console.log('‚ùå Erreur: Token invalide accept√©!');
  } catch (error) {
    console.log('‚úÖ Token invalide rejet√© - Erreur attendue:', error.response?.data);
  }

  console.log('\nüéØ Tests termin√©s !');
}

// Lancer les tests
testAuthentication(); 