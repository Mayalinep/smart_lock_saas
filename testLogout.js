const axios = require('axios');

// URLs de test
const LOGIN_URL = 'http://localhost:3000/api/auth/login';
const LOGOUT_URL = 'http://localhost:3000/api/auth/logout';
const PROTECTED_URL = 'http://localhost:3000/api/auth/me';

// Donn√©es de login
const loginData = {
  email: "jane.doe@example.com",
  password: "Mot2Passe!"
};

async function testLogout() {
  console.log('üîê === Test du logout ===\n');

  let cookies;

  // √âtape 1: Se connecter pour avoir un token
  console.log('1Ô∏è‚É£ Connexion pour r√©cup√©rer un token:');
  try {
    const loginResponse = await axios.post(LOGIN_URL, loginData);
    console.log('‚úÖ Connexion r√©ussie');
    
    cookies = loginResponse.headers['set-cookie'];
    console.log('üç™ Token re√ßu:', cookies ? 'OUI' : 'NON');
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 2: V√©rifier que le token fonctionne
  console.log('2Ô∏è‚É£ Test avec token valide (avant logout):');
  try {
    const response = await axios.get(PROTECTED_URL, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    console.log('‚úÖ Acc√®s autoris√©:', response.data.message);
  } catch (error) {
    console.log('‚ùå Token invalide:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 3: Se d√©connecter
  console.log('3Ô∏è‚É£ D√©connexion:');
  try {
    const logoutResponse = await axios.post(LOGOUT_URL, {}, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    console.log('‚úÖ D√©connexion r√©ussie:', logoutResponse.data.message);
    
    // V√©rifier si le serveur envoie une instruction de suppression de cookie
    const setCookieHeaders = logoutResponse.headers['set-cookie'];
    if (setCookieHeaders) {
      console.log('üç™ Cookie supprim√© par le serveur:', setCookieHeaders);
    }
  } catch (error) {
    console.log('‚ùå Erreur de d√©connexion:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 4: V√©rifier qu'on ne peut plus acc√©der AVEC l'ancien token (blacklist)
  console.log('4Ô∏è‚É£ Test avec ancien token (apr√®s logout - doit √™tre refus√© par blacklist):');
  try {
    await axios.get(PROTECTED_URL, { headers: { 'Cookie': cookies.join('; ') } });
    console.log('‚ùå Probl√®me: Acc√®s autoris√© avec token blacklit√©!');
  } catch (error) {
    console.log('‚úÖ Ancien token refus√© (attendu):', error.response?.status, error.response?.data?.message);
  }

  console.log('\nüéØ Test logout termin√© !');
}

// Lancer le test
testLogout(); 