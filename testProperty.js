const axios = require('axios');

// URLs de test
const LOGIN_URL = 'http://localhost:3000/api/auth/login';
const PROPERTY_URL = 'http://localhost:3000/api/properties';

// Donn√©es de connexion
const loginData = {
  email: "jane.doe@example.com",
  password: "Mot2Passe!"
};

// Donn√©es de propri√©t√© de test
const propertyData = {
  name: "Mon Appartement",
  address: "123 Rue de la Paix, Paris",
  description: "Bel appartement 2 pi√®ces"
};

async function testCreateProperty() {
  console.log('üè† === Test de cr√©ation de propri√©t√© ===\n');

  let cookies;

  // √âtape 1: Se connecter pour avoir un token
  console.log('1Ô∏è‚É£ Connexion pour r√©cup√©rer un token:');
  try {
    const loginResponse = await axios.post(LOGIN_URL, loginData);
    console.log('‚úÖ Connexion r√©ussie');
    
    cookies = loginResponse.headers['set-cookie'];
    console.log('üç™ Token re√ßu:', cookies ? 'OUI' : 'NON');
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 2: Tester cr√©ation sans authentification (devrait √©chouer)
  console.log('2Ô∏è‚É£ Test cr√©ation sans token (devrait √©chouer):');
  try {
    const response = await axios.post(PROPERTY_URL, propertyData);
    console.log('‚ùå Probl√®me: Route non prot√©g√©e!');
  } catch (error) {
    console.log('‚úÖ Route prot√©g√©e - Erreur attendue:', error.response?.data.message);
  }

  console.log('\n---\n');

  // √âtape 3: Cr√©ation de propri√©t√© avec token valide
  console.log('3Ô∏è‚É£ Cr√©ation de propri√©t√© avec token valide:');
  try {
    const response = await axios.post(PROPERTY_URL, propertyData, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    console.log('‚úÖ Propri√©t√© cr√©√©e avec succ√®s!');
    console.log('üìÑ R√©ponse:', {
      message: response.data.message,
      property: {
        id: response.data.data.property.id,
        name: response.data.data.property.name,
        address: response.data.data.property.address,
        description: response.data.data.property.description,
        ownerId: response.data.data.property.ownerId
      }
    });
  } catch (error) {
    console.log('‚ùå Erreur de cr√©ation:', error.response?.data);
  }

  console.log('\n---\n');

  // √âtape 4: Test avec donn√©es incompl√®tes (devrait √©chouer)
  console.log('4Ô∏è‚É£ Test avec donn√©es incompl√®tes (devrait √©chouer):');
  try {
    const incompleteData = { name: "Appartement sans adresse" }; // Manque address
    const response = await axios.post(PROPERTY_URL, incompleteData, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    console.log('‚ùå Probl√®me: Validation manquante!');
  } catch (error) {
    console.log('‚úÖ Validation fonctionne - Erreur attendue:', error.response?.data.message);
  }

  console.log('\nüéØ Test de propri√©t√© termin√© !');
}

// Lancer le test
testCreateProperty(); 