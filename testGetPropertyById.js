const axios = require('axios');

// URLs de test
const LOGIN_URL = 'http://localhost:3000/api/auth/login';
const PROPERTY_URL = 'http://localhost:3000/api/properties';

// Donn√©es de connexion
const loginData = {
  email: "jane.doe@example.com",
  password: "Mot2Passe!"
};

async function testGetPropertyById() {
  console.log('üîç === Test de r√©cup√©ration de propri√©t√© par ID ===\n');

  let cookies;
  let propertyId;

  // √âtape 1: Se connecter pour avoir un token
  console.log('1Ô∏è‚É£ Connexion pour r√©cup√©rer un token:');
  try {
    const loginResponse = await axios.post(LOGIN_URL, loginData);
    console.log('‚úÖ Connexion r√©ussie');
    
    cookies = loginResponse.headers['set-cookie'];
    console.log('üç™ Token re√ßu:', cookies ? 'OUI' : 'NON');
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 2: R√©cup√©rer la liste pour avoir un ID valide
  console.log('2Ô∏è‚É£ R√©cup√©ration d\'un ID de propri√©t√© existant:');
  try {
    const listResponse = await axios.get(PROPERTY_URL, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    const properties = listResponse.data.data.properties;
    if (properties.length > 0) {
      propertyId = properties[0].id;
      console.log(`‚úÖ ID de propri√©t√© trouv√©: ${propertyId}`);
      console.log(`üìÑ Propri√©t√©: ${properties[0].name}`);
    } else {
      console.log('‚ùå Aucune propri√©t√© existante, cr√©ation d\'une nouvelle...');
      
      // Cr√©er une propri√©t√© pour le test
      const newPropertyData = {
        name: "Propri√©t√© Test ID",
        address: "123 Test Street",
        description: "Propri√©t√© pour test par ID"
      };
      
      const createResponse = await axios.post(PROPERTY_URL, newPropertyData, {
        headers: { 'Cookie': cookies.join('; ') }
      });
      
      propertyId = createResponse.data.data.property.id;
      console.log(`‚úÖ Nouvelle propri√©t√© cr√©√©e: ${propertyId}`);
    }
  } catch (error) {
    console.log('‚ùå Erreur r√©cup√©ration liste:', error.response?.data);
    return;
  }

  console.log('\n---\n');

  // √âtape 3: Test r√©cup√©ration sans token (devrait √©chouer)
  console.log('3Ô∏è‚É£ Test r√©cup√©ration sans token (devrait √©chouer):');
  try {
    const response = await axios.get(`${PROPERTY_URL}/${propertyId}`);
    console.log('‚ùå Probl√®me: Route non prot√©g√©e!');
  } catch (error) {
    console.log('‚úÖ Route prot√©g√©e - Erreur attendue:', error.response?.data.message);
  }

  console.log('\n---\n');

  // √âtape 4: R√©cup√©ration avec token valide et ID existant
  console.log('4Ô∏è‚É£ R√©cup√©ration avec token valide et ID existant:');
  try {
    const response = await axios.get(`${PROPERTY_URL}/${propertyId}`, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    
    console.log('‚úÖ Propri√©t√© r√©cup√©r√©e avec succ√®s!');
    console.log('üìÑ R√©ponse:', {
      message: response.data.message,
      property: {
        id: response.data.data.property.id,
        name: response.data.data.property.name,
        address: response.data.data.property.address,
        description: response.data.data.property.description,
        ownerId: response.data.data.property.ownerId,
        isActive: response.data.data.property.isActive
      }
    });
  } catch (error) {
    console.log('‚ùå Erreur r√©cup√©ration:', error.response?.data);
  }

  console.log('\n---\n');

  // √âtape 5: Test avec ID inexistant (devrait √©chouer)
  console.log('5Ô∏è‚É£ Test avec ID inexistant (devrait √©chouer):');
  const fakeId = 'fake-property-id-123456789';
  try {
    const response = await axios.get(`${PROPERTY_URL}/${fakeId}`, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    console.log('‚ùå Probl√®me: ID inexistant accept√©!');
  } catch (error) {
    console.log('‚úÖ ID inexistant rejet√© - Erreur attendue:', error.response?.data.message);
    console.log('üìä Status code:', error.response?.status);
  }

  console.log('\n---\n');

  // √âtape 6: Test avec ID d'un autre utilisateur (si possible)
  console.log('6Ô∏è‚É£ Test s√©curit√© - ID d\'un autre utilisateur:');
  
  // Cr√©er un ID qui ressemble √† un vrai CUID mais n'existe pas ou n'appartient pas √† l'utilisateur
  const otherUserId = 'cmdru2on00000c6li26iszshe_fake';
  try {
    const response = await axios.get(`${PROPERTY_URL}/${otherUserId}`, {
      headers: { 'Cookie': cookies.join('; ') }
    });
    console.log('‚ùå Probl√®me: Acc√®s √† une propri√©t√© d\'autrui autoris√©!');
  } catch (error) {
    console.log('‚úÖ S√©curit√© OK - Propri√©t√© d\'autrui inaccessible:', error.response?.data.message);
    console.log('üìä Status code:', error.response?.status);
  }

  console.log('\nüéØ Test de r√©cup√©ration par ID termin√© !');
}

// Lancer le test
testGetPropertyById(); 