// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      String   @default("USER") // USER, ADMIN, SUPER_ADMIN
  isActive  Boolean  @default(true)
  
  // 2FA Fields
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String? // Secret TOTP (encrypted)
  backupCodes     String? // JSON array of backup codes (encrypted)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProperties Property[] @relation("PropertyOwner")
  accessGrants    Access[]   @relation("AccessUser")
  createdAccesses Access[]   @relation("AccessOwner")
  webhookEndpoints WebhookEndpoint[]

  @@map("users")
}

model Property {
  id          String   @id @default(cuid())
  name        String
  address     String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId String
  owner   User     @relation("PropertyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  accesses Access[]
  lockEvents LockEvent[]

  @@map("properties")
}

model Access {
  id          String   @id @default(cuid())
  code        String   @unique // Code d'accès unique
  hashedCode  String?  // Hash du code (transition: nullable pour migration progressive)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  accessType  String   @default("TEMPORARY") // PERMANENT, TEMPORARY, ONE_TIME
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Champs de révocation (soft delete)
  revokedAt   DateTime?
  revokedBy   String?

  // Relations
  userId     String
  user       User     @relation("AccessUser", fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  ownerId    String
  owner      User     @relation("AccessOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("accesses")
  @@index([propertyId, isActive], name: "idx_access_property_active")
  @@index([userId, isActive], name: "idx_access_user_active")
}

model LockEvent {
  id          String   @id @default(cuid())
  propertyId  String
  type        String   // 'ACCESS_GRANTED', 'REVOKE', 'BATTERY_LOW', 'MANUAL_LOCK', 'LOCK_STATUS_CHECK'
  timestamp   DateTime @default(now())
  details     String?
  
  // Relations
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("lock_events")
  @@index([propertyId, timestamp], name: "idx_lock_events_property_ts")
}

model WebhookEndpoint {
  id        String   @id @default(cuid())
  url       String
  secret    String
  events    String?  // liste séparée par des virgules (ex: access_revoked,lock_battery_low)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation optionnelle avec un propriétaire (User)
  ownerId String?
  owner   User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("webhook_endpoints")
  @@index([ownerId])
}

// Enums remplacés par des String avec commentaires ci-dessus
// UserRole: "USER" | "ADMIN" | "SUPER_ADMIN"  
// AccessType: "PERMANENT" | "TEMPORARY" | "ONE_TIME"
// LockEventType: "ACCESS_GRANTED" | "REVOKE" | "BATTERY_LOW" | "MANUAL_LOCK" | "LOCK_STATUS_CHECK" 