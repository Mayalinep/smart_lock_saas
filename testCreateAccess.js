const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testCreateAccess() {
  console.log('‚úèÔ∏è === Test Cr√©ation d\'Acc√®s Digital ===\n');

  let ownerToken;
  let targetUserToken;
  let propertyId;
  let targetUserId;

  try {
    // 1. Cr√©ation d'un utilisateur cible (qui recevra l'acc√®s)
    console.log('1Ô∏è‚É£ Cr√©ation d\'un utilisateur cible:');
    
    const targetUser = {
      email: 'target.user@example.com',
      password: 'TargetPass123!',
      firstName: 'Target',
      lastName: 'User'
    };

    try {
      const registerResponse = await axios.post(`${BASE_URL}/auth/register`, targetUser);
      if (registerResponse.data.success) {
        targetUserId = registerResponse.data.data.user.id;
        console.log(`‚úÖ Utilisateur cible cr√©√©: ${targetUserId}`);
        console.log(`üìß Email: ${targetUser.email}`);
      }
    } catch (registerError) {
      // Si l'utilisateur existe d√©j√†, se connecter
      if (registerError.response?.status === 409) {
        console.log('üìù Utilisateur cible existe d√©j√†, connexion...');
        const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
          email: targetUser.email,
          password: targetUser.password
        });
        if (loginResponse.data.success) {
          targetUserId = loginResponse.data.data.user.id;
          console.log(`‚úÖ Connexion utilisateur cible r√©ussie: ${targetUserId}`);
        }
      } else {
        throw registerError;
      }
    }

    console.log('\n---\n');

    // 2. Connexion propri√©taire
    console.log('2Ô∏è‚É£ Connexion du propri√©taire:');
    const ownerLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'jane.doe@example.com',
      password: 'Mot2Passe!'
    });

    if (ownerLoginResponse.data.success) {
      console.log('‚úÖ Connexion propri√©taire r√©ussie');
      const cookies = ownerLoginResponse.headers['set-cookie'];
      const tokenCookie = cookies.find(cookie => cookie.startsWith('token='));
      ownerToken = tokenCookie ? tokenCookie.split(';')[0] : null;
      console.log(`üç™ Token propri√©taire: ${ownerToken ? 'OUI' : 'NON'}`);
    }

    console.log('\n---\n');

    // 3. Cr√©ation d'une propri√©t√©
    console.log('3Ô∏è‚É£ Cr√©ation d\'une propri√©t√© pour les tests:');
    const createPropertyResponse = await axios.post(`${BASE_URL}/properties`, {
      name: 'Propri√©t√© Test Acc√®s',
      address: '123 Rue Test Acc√®s, Ville Digital',
      description: 'Propri√©t√© pour tester la cr√©ation d\'acc√®s'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (createPropertyResponse.data.success) {
      propertyId = createPropertyResponse.data.data.property.id;
      console.log(`‚úÖ Propri√©t√© cr√©√©e: ${propertyId}`);
      console.log(`üè† Nom: ${createPropertyResponse.data.data.property.name}`);
    }

    console.log('\n---\n');

    // 4. Test sans token (devrait √©chouer)
    console.log('4Ô∏è‚É£ Test cr√©ation d\'acc√®s sans token (devrait √©chouer):');
    try {
      await axios.post(`${BASE_URL}/access`, {
        propertyId,
        userId: targetUserId,
        startDate: '2025-08-05T10:00:00.000Z',
        endDate: '2025-08-15T18:00:00.000Z',
        accessType: 'TEMPORARY',
        description: 'Test sans token'
      });
      console.log('‚ùå Probl√®me: La cr√©ation devrait √©chouer sans token!');
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log(`‚úÖ Route prot√©g√©e - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 5. Test avec donn√©es manquantes
    console.log('5Ô∏è‚É£ Test avec donn√©es manquantes (devrait √©chouer):');
    try {
      await axios.post(`${BASE_URL}/access`, {
        propertyId,
        // userId manquant
        startDate: '2025-08-05T10:00:00.000Z',
        endDate: '2025-08-15T18:00:00.000Z',
        accessType: 'TEMPORARY'
      }, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec des donn√©es manquantes!');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log(`‚úÖ Validation r√©ussie - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 6. Test avec propri√©t√© inexistante
    console.log('6Ô∏è‚É£ Test avec propri√©t√© inexistante (devrait √©chouer):');
    try {
      await axios.post(`${BASE_URL}/access`, {
        propertyId: 'property-inexistante-123',
        userId: targetUserId,
        startDate: '2025-08-05T10:00:00.000Z',
        endDate: '2025-08-15T18:00:00.000Z',
        accessType: 'TEMPORARY',
        description: 'Test propri√©t√© inexistante'
      }, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec une propri√©t√© inexistante!');
    } catch (error) {
      if (error.response && error.response.status === 403) {
        console.log(`‚úÖ Propri√©t√© inexistante rejet√©e - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 7. Test avec utilisateur inexistant
    console.log('7Ô∏è‚É£ Test avec utilisateur cible inexistant (devrait √©chouer):');
    try {
      await axios.post(`${BASE_URL}/access`, {
        propertyId,
        userId: 'user-inexistant-123',
        startDate: '2025-08-05T10:00:00.000Z',
        endDate: '2025-08-15T18:00:00.000Z',
        accessType: 'TEMPORARY',
        description: 'Test utilisateur inexistant'
      }, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec un utilisateur inexistant!');
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log(`‚úÖ Utilisateur inexistant rejet√© - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 8. Test avec dates invalides (startDate >= endDate)
    console.log('8Ô∏è‚É£ Test avec dates invalides - startDate >= endDate (devrait √©chouer):');
    try {
      await axios.post(`${BASE_URL}/access`, {
        propertyId,
        userId: targetUserId,
        startDate: '2025-08-15T10:00:00.000Z',
        endDate: '2025-08-10T18:00:00.000Z', // Date de fin avant le d√©but
        accessType: 'TEMPORARY',
        description: 'Test dates invalides'
      }, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec des dates invalides!');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log(`‚úÖ Dates invalides rejet√©es - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 9. Test avec date dans le pass√©
    console.log('9Ô∏è‚É£ Test avec date de d√©but dans le pass√© (devrait √©chouer):');
    try {
      await axios.post(`${BASE_URL}/access`, {
        propertyId,
        userId: targetUserId,
        startDate: '2024-01-01T10:00:00.000Z', // Date dans le pass√©
        endDate: '2025-08-15T18:00:00.000Z',
        accessType: 'TEMPORARY',
        description: 'Test date pass√©e'
      }, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Devrait √©chouer avec une date dans le pass√©!');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log(`‚úÖ Date pass√©e rejet√©e - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\n---\n');

    // 10. Cr√©ation d'acc√®s r√©ussie - TEMPORARY
    console.log('üîü Cr√©ation d\'acc√®s TEMPORARY r√©ussie:');
    const tempAccessResponse = await axios.post(`${BASE_URL}/access`, {
      propertyId,
      userId: targetUserId,
      startDate: '2025-08-05T10:00:00.000Z',
      endDate: '2025-08-15T18:00:00.000Z',
      accessType: 'TEMPORARY',
      description: 'Acc√®s temporaire pour femme de m√©nage'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (tempAccessResponse.data.success) {
      const access = tempAccessResponse.data.data.access;
      console.log('‚úÖ Acc√®s TEMPORARY cr√©√© avec succ√®s!');
      console.log(`üÜî ID Acc√®s: ${access.id}`);
      console.log(`üîë Code: ${access.code} (${access.code.length} chiffres)`);
      console.log(`üë§ Utilisateur: ${access.user.firstName} ${access.user.lastName} (${access.user.email})`);
      console.log(`üè† Propri√©t√©: ${access.property.name}`);
      console.log(`üìÖ P√©riode: ${new Date(access.startDate).toLocaleDateString()} - ${new Date(access.endDate).toLocaleDateString()}`);
      console.log(`üìù Description: ${access.description}`);
      console.log(`üìä Statut: ${access.isActive ? 'ACTIF' : 'INACTIF'}`);
    }

    console.log('\n---\n');

    // 11. Cr√©ation d'acc√®s r√©ussie - PERMANENT
    console.log('1Ô∏è‚É£1Ô∏è‚É£ Cr√©ation d\'acc√®s PERMANENT r√©ussie:');
    const permAccessResponse = await axios.post(`${BASE_URL}/access`, {
      propertyId,
      userId: targetUserId,
      startDate: '2025-08-01T00:00:00.000Z',
      endDate: '2025-12-31T23:59:59.000Z',
      accessType: 'PERMANENT',
      description: 'Acc√®s permanent pour locataire'
    }, {
      headers: { Cookie: ownerToken }
    });

    if (permAccessResponse.data.success) {
      const access = permAccessResponse.data.data.access;
      console.log('‚úÖ Acc√®s PERMANENT cr√©√© avec succ√®s!');
      console.log(`üÜî ID Acc√®s: ${access.id}`);
      console.log(`üîë Code: ${access.code} (${access.code.length} chiffres)`);
      console.log(`üë§ Utilisateur: ${access.user.firstName} ${access.user.lastName}`);
      console.log(`üè† Propri√©t√©: ${access.property.name}`);
      console.log(`üìÖ P√©riode: ${new Date(access.startDate).toLocaleDateString()} - ${new Date(access.endDate).toLocaleDateString()}`);
      console.log(`üìù Description: ${access.description}`);
      console.log(`üìä Statut: ${access.isActive ? 'ACTIF' : 'INACTIF'}`);
    }

    console.log('\n---\n');

    // 12. Test: Propri√©taire ne peut pas se donner acc√®s
    console.log('1Ô∏è‚É£2Ô∏è‚É£ Test: Propri√©taire ne peut pas se donner acc√®s (devrait √©chouer):');
    try {
      const ownerUserId = ownerLoginResponse.data.data.user.id;
      await axios.post(`${BASE_URL}/access`, {
        propertyId,
        userId: ownerUserId, // Le propri√©taire essaie de se donner acc√®s
        startDate: '2025-08-05T10:00:00.000Z',
        endDate: '2025-08-15T18:00:00.000Z',
        accessType: 'TEMPORARY',
        description: 'Auto-acc√®s propri√©taire'
      }, {
        headers: { Cookie: ownerToken }
      });
      console.log('‚ùå Probl√®me: Le propri√©taire ne devrait pas pouvoir se donner acc√®s!');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log(`‚úÖ Auto-acc√®s rejet√© - Erreur attendue: ${error.response.data.message}`);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

    console.log('\nüéØ Test de cr√©ation d\'acc√®s termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur dans le test:', error.response?.data || error.message);
  }
}

// Ex√©cuter le test
testCreateAccess(); 